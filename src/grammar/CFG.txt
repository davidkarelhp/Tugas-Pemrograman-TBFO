Terminals:
if elif else for in is while break continue def class pass with as from import raise // ** += -= *= /= **= //= %= , == < <= > >= != True False or and 0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 0 1 2 3 4 5 6 7 8 9 ! " # $ % & ' - . / : ; < = > ? @ [ \ ] ^ _ ` { } ~
Variables:
START VAR VAL VVS VV PARAM PARAMETER FUNC ASSIGNMENT OPERATOR RELATION EXPRESSION ARRAY ISIDATA DICT ISIDICT IF ELIF ELSE FOR BC BREAK CONTINUE RAISE WHILE IMPORT WITH DEF CLASS BEBAS STRING
Productions:
START -> START START | VAR ASSIGNMENT VV | VAR = ISIDATA | VAR ASSIGNMENT OPERATOR | VAR ASSIGNMENT EXPRESSION | IF | FOR | WHILE | IMPORT | DEF | CLASS | WITH | STRING | PARAM = PARAM;
VAR -> BEBAS;
VAL -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | VAL VAL | VAL _ VAL;
VVS -> VV | STRING;
VV -> VAL | VAR;
PARAM -> VVS | PARAM , PARAM | ARRAY | DICT | PARAMETER;
PARAMETER -> ( PARAM ) | ( PARAMETER ) | ( );
FUNC -> VAR PARAMETER;
ASSIGNMENT -> = | += | -= | /= | *= | **= | //= | %=;
OPERATOR -> VV + VV | VV - VV | VV / VV | VV * VV | VV ** VV | VV % VV | VV // VV;
RELATION -> == | < | <= | > | >= | != ;
EXPRESSION -> VV RELATION VV | True | False;
ARRAY -> [ ] | [ ISIDATA ];
ISIDATA -> PARAM | PARAMETER | ISIDATA , ISIDATA;
DICT -> { } | { ISIDICT };
ISIDICT -> ISIDATA : ISIDATA | ISIDICT , ISIDICT;
IF -> if EXPRESSION : START | if EXPRESSION : START ELIF | if VAR : START | if VAR : START ELIF;
ELIF -> elif EXPRESSION : START | elif EXPRESSION : START ELIF | elif VAR : START | elif VAR : START ELIF | ELSE;
ELSE -> else START;
FOR -> for VAR in VAR : START | for VAR in VAR : BC | for VAR in VAR : START BC | for VAR in range BRACKET;
BC -> BREAK | CONTINUE | BC BC;
BREAK -> break;
CONTINUE -> continue;
RAISE -> raise STRING | raise FUNC;
WHILE -> while EXPRESSION : START | while EXPRESSION : BC | while EXPRESSION : START BC;
IMPORT -> import VAR | from VAR import VAR | from VAR import VAR as VAR | import VAR as VAR;
WITH -> with VAR as VAR;
DEF -> def FUNC : START | def FUNC : START return | def FUNC : START return VAR | def FUNC : START return EXPRESSION | def FUNC : pass | def FUNC : START pass ;
CLASS -> class VAR : START | class VAR : pass | class VAR : START pass;
BEBAS -> BEBAS BEBAS | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | ! | " | # | $ | % | & | ' | - | . | / | : | ; | < | = | > | ? | @ | [ | \ | ] | ^ | _ | ` | { | } | ~;
STRING -> " BEBAS " | ' BEBAS ' | " " " BEBAS " " " | ' ' ' BEBAS ' ' ';