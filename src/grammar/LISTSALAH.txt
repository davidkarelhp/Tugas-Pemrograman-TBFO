
DEF -> def FUNC : START | def FUNC : START return | def FUNC : START return VAR | def FUNC : START return EXPRESSION | def FUNC : pass | def FUNC : START pass;
IMPORT -> import VAR | from VAR import VAR | from VAR import VAR as VAR | import VAR as VAR;
WHILE -> while EXPRESSION : START | while EXPRESSION : BC | while EXPRESSION : START BC;
FOR -> for VAR in VAR : START | for VAR in VAR : BC | for VAR in VAR : START BC | for VAR in range BRACKET;
ELIF -> elif EXPRESSION : START | elif EXPRESSION : START ELIF | elif VAR : START | elif VAR : START ELIF | ELSE;
IF -> if EXPRESSION : START | if EXPRESSION : START ELIF | if VAR : START | if VAR : START ELIF;
ISIDICT -> ISIDATA : ISIDATA | ISIDICT , ISIDICT;
DICT -> { } | { ISIDICT };------------barengan
ELSE -> else START;-------------------barengan
ISIDATA -> PARAM | PARAMETER | ISIDATA , ISIDATA;
ARRAY -> [ ] | [ ISIDATA ];

;
IF -> if EXPRESSION : START | if EXPRESSION : START ELIF | if VAR : START | if VAR : START ELIF;
ELIF -> elif EXPRESSION : START | elif EXPRESSION : START ELIF | elif VAR : START | elif VAR : START ELIF | ELSE;
ELSE -> else START;
BC -> BREAK | CONTINUE | BC BC;
BREAK -> break;
CONTINUE -> continue;
RAISE -> raise STRING | raise FUNC;
WHILE -> while EXPRESSION : START | while EXPRESSION : BC | while EXPRESSION : START BC;
IMPORT -> import VAR | from VAR import VAR | from VAR import VAR as VAR | import VAR as VAR;
WITH -> with VAR as VAR;
DEF -> def FUNC : START | def FUNC : START return | def FUNC : START return VAR | def FUNC : START return EXPRESSION | def FUNC : pass | def FUNC : START pass ;
CLASS -> class VAR : START | class VAR : pass | class VAR : START pass;
BEBAS -> BEBAS BEBAS | a;
STRING -> " BEBAS " | ' BEBAS ' | " " " BEBAS " " " | ' ' ' BEBAS ' ' '