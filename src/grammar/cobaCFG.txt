Terminals:
if elif else ( ) " ' : for in while break continue import from as def class with open and or not return False True is
Variables:
S IF ELIF ELSE EXPRESSION STRING FOR WHILE INSIDELOOP IMPORT FROM DEF CLASS WITH A AND OR NOT NEXPRESSION RETURN BOOLEAN
Productions:
S -> S | S S | IF ELIF | IF | IF ELSE | EXPRESSION | FOR | WHILE | IMPORT | FROM | DEF | CLASS | WITH | NOT | AND | OR | BOOLEAN | IS | " A " | ' A ' | " " " A " " " | ' ' ' A ' ' ';
A -> A A | IF ELIF | IF | IF ELSE | EXPRESSION | FOR | WHILE | IMPORT | FROM | DEF | CLASS | WITH | NOT | AND | OR | BOOLEAN | IS;
EXPRESSION -> ( EXPRESSION ) | EXPRESSION EXPRESSION | " EXPRESSION " | ' EXPRESSION ' | " " " EXPRESSION " " " | ' ' ' EXPRESSION ' ' ';
NEXPRESSION -> EXPRESSION | NOT | OR | AND | ( NEXPRESSION ) | BOOLEAN | IS;
IF -> if NEXPRESSION : S;
ELIF -> elif NEXPRESSION : S | elif NEXPRESSION : S ELIF | elif NEXPRESSION : S ELSE;
ELSE -> else : S;
FOR -> for EXPRESSION in EXPRESSION : INSIDELOOP | FOR EXPRESSION in range ( EXPRESSION ) : INSIDELOOP;
WHILE -> while NEXPRESSION : INSIDELOOP;
INSIDELOOP -> break | continue | S | INSIDELOOP INSIDELOOP;
IMPORT -> import EXPRESSION | import EXPRESSION as EXPRESSION;
FROM -> from EXPRESSION IMPORT;
DEF -> def EXPRESSION ( EXPRESSION ) : S | def EXPRESSION ( EXPRESSION ) : S RETURN | def EXPRESSION ( EXPRESSION ) : RETURN;
CLASS -> class EXPRESSION : S | class EXPRESSION ( EXPRESSION ) : S;
WITH -> with open ( EXPRESSION ) as EXPRESSION : S;
NOT -> not NEXPRESSION;
AND -> NEXPRESSION and NEXPRESSION;
OR -> NEXPRESSION or NEXPRESSION;
RETURN -> return NEXPRESSION | return;
BOOLEAN -> True | False;
IS -> NEXPRESSION is NEXPRESSION