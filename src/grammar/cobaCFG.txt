Terminals:
if elif else ( ) " ' : for in while break continue import from as def class with open and or not return False True is pass raise TypeError Exception None
Variables:
S IF ELIF ELSE EXPRESSION STRING FOR WHILE INSIDELOOP IMPORT FROM DEF CLASS WITH A AND OR NOT NEXPRESSION RETURN BOOLEAN INSIDEDEF IFDEF ELIFDEF ELSEDEF ADEF TERMINAL FORDEF WHILEDEF INSIDELOOPDEF
Productions:
S -> S | S S | IF ELIF | IF | IF ELSE | EXPRESSION | FOR | WHILE | IMPORT | FROM | DEF | CLASS | WITH | NOT | AND | OR | BOOLEAN | IS | RAISE | " A " | ' A ' | " " " A " " " | ' ' ' A ' ' ' | pass;
A -> A A | IF ELIF | IF | IF ELSE | EXPRESSION | FOR | WHILE | IMPORT | FROM | DEF | CLASS | WITH | NOT | AND | OR | BOOLEAN | IS | TERMINAL;
TERMINAL -> TERMINAL TERMINAL | if | elif | else | ( | ) | " | ' | : | for | in | while | break | continue | import | from | as | def | class | with | open | and | or | not | return | False | True | is | pass | raise | TypeError | Exception | None;
EXPRESSION -> ( EXPRESSION ) | EXPRESSION EXPRESSION | " EXPRESSION " | ' EXPRESSION ' | " " " EXPRESSION " " " | ' ' ' EXPRESSION ' ' ';
NEXPRESSION -> EXPRESSION | NOT | OR | AND | ( NEXPRESSION ) | BOOLEAN | IS;
IF -> if NEXPRESSION : S | if EXPRESSION : S;
ELIF -> elif NEXPRESSION : S | elif NEXPRESSION : S ELIF | elif NEXPRESSION : S ELSE | elif EXPRESSION : S | elif EXPRESSION : S ELIF | elif EXPRESSION : S ELSE;
ELSE -> else : S;
FOR -> for EXPRESSION in EXPRESSION : INSIDELOOP | FOR EXPRESSION in range ( EXPRESSION ) : INSIDELOOP;
WHILE -> while NEXPRESSION : INSIDELOOP | while EXPRESSION : INSIDELOOP;
INSIDELOOP -> break | continue | S | INSIDELOOP INSIDELOOP;
IMPORT -> import EXPRESSION | import EXPRESSION as EXPRESSION;
FROM -> from EXPRESSION IMPORT;
DEF -> def EXPRESSION ( EXPRESSION ) : INSIDEDEF RETURN | def EXPRESSION ( EXPRESSION ) : INSIDEDEF;
INSIDEDEF ->  INSIDEDEF | INSIDEDEF INSIDEDEF | IFDEF ELIFDEF | IFDEF | IFDEF ELSEDEF | EXPRESSION | FOR | WHILE | IMPORT | FROM | DEF | CLASS | WITH | NOT | AND | OR | BOOLEAN | IS | RETURN | " ADEF " | ' ADEF ' | " " " ADEF " " " | ' ' ' ADEF ' ' ';
ADEF -> ADEF ADEF | IFDEF ELIFDEF | IFDEF | IFDEF ELSEDEF | EXPRESSION | FOR | WHILE | IMPORT | FROM | DEF | CLASS | WITH | NOT | AND | OR | BOOLEAN | IS | RETURN | TERMINAL;
IFDEF -> if NEXPRESSION : INSIDEDEF | if EXPRESSION : INSIDEDEF;
ELIFDEF -> elif NEXPRESSION : INSIDEDEF | elif NEXPRESSION : INSIDEDEF ELIFDEF | elif NEXPRESSION : INSIDEDEF ELSEDEF | elif EXPRESSION : INSIDEDEF | elif EXPRESSION : INSIDEDEF ELIFDEF | elif EXPRESSION : INSIDEDEF ELSEDEF;
ELSEDEF -> else : INSIDEDEF;
FORDEF -> for EXPRESSION in EXPRESSION : INSIDELOOPDEF | FORDEF EXPRESSION in range ( EXPRESSION ) : INSIDELOOPDEF;
WHILEDEF -> while NEXPRESSION : INSIDELOOPDEF | while EXPRESSION : INSIDELOOPDEF;
INSIDELOOPDEF -> break | continue | INSIDEDEF | INSIDELOOPDEF INSIDELOOPDEF;
CLASS -> class EXPRESSION : S | class EXPRESSION ( EXPRESSION ) : S;
WITH -> with open ( EXPRESSION ) as EXPRESSION : S;
NOT -> not NEXPRESSION;
AND -> NEXPRESSION and NEXPRESSION;
OR -> NEXPRESSION or NEXPRESSION;
RETURN -> return NEXPRESSION | return EXPRESSION | return | return S;
BOOLEAN -> True | False | None;
IS -> NEXPRESSION is NEXPRESSION;
RAISE -> raise TypeError EXPRESSION | raise Exception EXPRESSION