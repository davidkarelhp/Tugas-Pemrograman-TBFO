Terminals:
if elif else ( ) " ' : for in while break continue import from as def class with open = += -= *= **= &= |= 
Variables:
S IF ELIF ELSE EXPRESSION STRING FOR WHILE INSIDELOOP IMPORT FROM DEF CLASS WITH A
Productions:
S -> S | S S | IF ELIF | IF | IF ELSE | EXPRESSION | FOR | WHILE | IMPORT | FROM | DEF | CLASS | WITH | " A " | ' A ' | " " " A " " " | ' ' ' A ' ' ';
A -> A A | IF ELIF | IF | IF ELSE | EXPRESSION | FOR | WHILE | IMPORT | FROM | DEF | CLASS | WITH;
EXPRESSION -> ( EXPRESSION ) | EXPRESSION EXPRESSION | " EXPRESSION " | ' EXPRESSION ' | " " " EXPRESSION " " " | ' ' ' EXPRESSION ' ' ';
IF -> if EXPRESSION : S;
ELIF -> elif EXPRESSION : S | elif EXPRESSION : S ELIF | elif EXPRESSION : S ELSE;
ELSE -> else : S;
FOR -> for EXPRESSION in EXPRESSION : INSIDELOOP | FOR EXPRESSION in range ( EXPRESSION ) : INSIDELOOP;
WHILE -> while EXPRESSION : INSIDELOOP;
INSIDELOOP -> break | continue | S | INSIDELOOP INSIDELOOP;
IMPORT -> import EXPRESSION | import EXPRESSION as EXPRESSION;
FROM -> from EXPRESSION IMPORT;
DEF -> def EXPRESSION ( EXPRESSION ) : S;
CLASS -> class EXPRESSION : S | class EXPRESSION ( EXPRESSION ) : S;
WITH -> with open ( EXPRESSION ) as EXPRESSION : S;
ASSIGNEQ -> EXPRESSION = ASSIGNEQ;
ASSIGN -> ASSIGNEQ | EXPRESSION += EXPRESSION | EXPRESSION -= EXPRESSION | EXPRESSION *= EXPRESSION | EXPRESSION **= EXPRESSION | EXPRESSION /= EXPRESSION | EXPRESSION //= EXPRESSION